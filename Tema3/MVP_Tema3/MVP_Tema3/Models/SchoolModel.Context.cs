//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVP_Tema3.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ScoalaDBEntities1 : DbContext
    {
        public ScoalaDBEntities1()
            : base("name=ScoalaDBEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Absenta> Absentas { get; set; }
        public virtual DbSet<Administrator> Administrators { get; set; }
        public virtual DbSet<Clasa> Clasas { get; set; }
        public virtual DbSet<Elev> Elevs { get; set; }
        public virtual DbSet<Materie> Materies { get; set; }
        public virtual DbSet<Nota> Notas { get; set; }
        public virtual DbSet<Profesor> Profesors { get; set; }
    
        public virtual int AddAbsence(Nullable<int> absentaID, string data, Nullable<bool> motivata, Nullable<int> elevID, Nullable<int> materieID)
        {
            var absentaIDParameter = absentaID.HasValue ?
                new ObjectParameter("absentaID", absentaID) :
                new ObjectParameter("absentaID", typeof(int));
    
            var dataParameter = data != null ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(string));
    
            var motivataParameter = motivata.HasValue ?
                new ObjectParameter("motivata", motivata) :
                new ObjectParameter("motivata", typeof(bool));
    
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            var materieIDParameter = materieID.HasValue ?
                new ObjectParameter("materieID", materieID) :
                new ObjectParameter("materieID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAbsence", absentaIDParameter, dataParameter, motivataParameter, elevIDParameter, materieIDParameter);
        }
    
        public virtual int AddGrade(Nullable<int> notaID, Nullable<int> elevID, Nullable<int> materieID, Nullable<int> nota)
        {
            var notaIDParameter = notaID.HasValue ?
                new ObjectParameter("notaID", notaID) :
                new ObjectParameter("notaID", typeof(int));
    
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            var materieIDParameter = materieID.HasValue ?
                new ObjectParameter("materieID", materieID) :
                new ObjectParameter("materieID", typeof(int));
    
            var notaParameter = nota.HasValue ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGrade", notaIDParameter, elevIDParameter, materieIDParameter, notaParameter);
        }
    
        public virtual int AddStudent(Nullable<int> elevId, string nume, Nullable<int> clasaId)
        {
            var elevIdParameter = elevId.HasValue ?
                new ObjectParameter("elevId", elevId) :
                new ObjectParameter("elevId", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var clasaIdParameter = clasaId.HasValue ?
                new ObjectParameter("clasaId", clasaId) :
                new ObjectParameter("clasaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudent", elevIdParameter, numeParameter, clasaIdParameter);
        }
    
        public virtual int AddSubject(Nullable<int> materieId, string denumire)
        {
            var materieIdParameter = materieId.HasValue ?
                new ObjectParameter("materieId", materieId) :
                new ObjectParameter("materieId", typeof(int));
    
            var denumireParameter = denumire != null ?
                new ObjectParameter("denumire", denumire) :
                new ObjectParameter("denumire", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSubject", materieIdParameter, denumireParameter);
        }
    
        public virtual int AddTeacher(Nullable<int> profesorId, string nume, Nullable<bool> diriginte, Nullable<int> materieId)
        {
            var profesorIdParameter = profesorId.HasValue ?
                new ObjectParameter("profesorId", profesorId) :
                new ObjectParameter("profesorId", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var diriginteParameter = diriginte.HasValue ?
                new ObjectParameter("diriginte", diriginte) :
                new ObjectParameter("diriginte", typeof(bool));
    
            var materieIdParameter = materieId.HasValue ?
                new ObjectParameter("materieId", materieId) :
                new ObjectParameter("materieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTeacher", profesorIdParameter, numeParameter, diriginteParameter, materieIdParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> AverageGrade(Nullable<int> elevID, Nullable<int> materieID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            var materieIDParameter = materieID.HasValue ?
                new ObjectParameter("materieID", materieID) :
                new ObjectParameter("materieID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("AverageGrade", elevIDParameter, materieIDParameter);
        }
    
        public virtual int DeleteGrade(Nullable<int> notaID)
        {
            var notaIDParameter = notaID.HasValue ?
                new ObjectParameter("notaID", notaID) :
                new ObjectParameter("notaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGrade", notaIDParameter);
        }
    
        public virtual int DeleteStudent(Nullable<int> elevId)
        {
            var elevIdParameter = elevId.HasValue ?
                new ObjectParameter("elevId", elevId) :
                new ObjectParameter("elevId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", elevIdParameter);
        }
    
        public virtual int DeleteSubject(Nullable<int> materieId)
        {
            var materieIdParameter = materieId.HasValue ?
                new ObjectParameter("materieId", materieId) :
                new ObjectParameter("materieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSubject", materieIdParameter);
        }
    
        public virtual int DeleteTeacher(Nullable<int> profesorId)
        {
            var profesorIdParameter = profesorId.HasValue ?
                new ObjectParameter("profesorId", profesorId) :
                new ObjectParameter("profesorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTeacher", profesorIdParameter);
        }
    
        public virtual ObjectResult<GetAllAbsence_Result> GetAllAbsence(Nullable<int> elevID, Nullable<int> materieID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            var materieIDParameter = materieID.HasValue ?
                new ObjectParameter("materieID", materieID) :
                new ObjectParameter("materieID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAbsence_Result>("GetAllAbsence", elevIDParameter, materieIDParameter);
        }
    
        public virtual ObjectResult<GetAllGrades_Result> GetAllGrades(Nullable<int> elevID, Nullable<int> materieID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            var materieIDParameter = materieID.HasValue ?
                new ObjectParameter("materieID", materieID) :
                new ObjectParameter("materieID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllGrades_Result>("GetAllGrades", elevIDParameter, materieIDParameter);
        }
    
        public virtual ObjectResult<GetClassStudents_Result> GetClassStudents(Nullable<int> clasaID)
        {
            var clasaIDParameter = clasaID.HasValue ?
                new ObjectParameter("clasaID", clasaID) :
                new ObjectParameter("clasaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClassStudents_Result>("GetClassStudents", clasaIDParameter);
        }
    
        public virtual ObjectResult<GetStudentAbsence_Result> GetStudentAbsence(Nullable<int> elevID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentAbsence_Result>("GetStudentAbsence", elevIDParameter);
        }
    
        public virtual ObjectResult<GetStudentAverageGrades_Result> GetStudentAverageGrades(Nullable<int> elevID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentAverageGrades_Result>("GetStudentAverageGrades", elevIDParameter);
        }
    
        public virtual ObjectResult<GetStudentClass_Result> GetStudentClass(Nullable<int> clasaID)
        {
            var clasaIDParameter = clasaID.HasValue ?
                new ObjectParameter("clasaID", clasaID) :
                new ObjectParameter("clasaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentClass_Result>("GetStudentClass", clasaIDParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> GetStudentGeneralAverage(Nullable<int> elevID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetStudentGeneralAverage", elevIDParameter);
        }
    
        public virtual ObjectResult<GetStudentGrades_Result> GetStudentGrades(Nullable<int> elevID)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentGrades_Result>("GetStudentGrades", elevIDParameter);
        }
    
        public virtual ObjectResult<GetStudentGradesBySubject_Result> GetStudentGradesBySubject(Nullable<int> elevID, Nullable<int> materieId)
        {
            var elevIDParameter = elevID.HasValue ?
                new ObjectParameter("elevID", elevID) :
                new ObjectParameter("elevID", typeof(int));
    
            var materieIdParameter = materieId.HasValue ?
                new ObjectParameter("materieId", materieId) :
                new ObjectParameter("materieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentGradesBySubject_Result>("GetStudentGradesBySubject", elevIDParameter, materieIdParameter);
        }
    
        public virtual ObjectResult<GetTeacherClasses_Result> GetTeacherClasses(Nullable<int> profesorID)
        {
            var profesorIDParameter = profesorID.HasValue ?
                new ObjectParameter("profesorID", profesorID) :
                new ObjectParameter("profesorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeacherClasses_Result>("GetTeacherClasses", profesorIDParameter);
        }
    
        public virtual int ModifyAbsence(Nullable<int> absentaID)
        {
            var absentaIDParameter = absentaID.HasValue ?
                new ObjectParameter("absentaID", absentaID) :
                new ObjectParameter("absentaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyAbsence", absentaIDParameter);
        }
    
        public virtual int ModifyGrade(Nullable<int> notaId, Nullable<int> nota)
        {
            var notaIdParameter = notaId.HasValue ?
                new ObjectParameter("notaId", notaId) :
                new ObjectParameter("notaId", typeof(int));
    
            var notaParameter = nota.HasValue ?
                new ObjectParameter("nota", nota) :
                new ObjectParameter("nota", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyGrade", notaIdParameter, notaParameter);
        }
    
        public virtual int ModifyStudent(Nullable<int> elevId, string nume)
        {
            var elevIdParameter = elevId.HasValue ?
                new ObjectParameter("elevId", elevId) :
                new ObjectParameter("elevId", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyStudent", elevIdParameter, numeParameter);
        }
    
        public virtual int ModifySubject(Nullable<int> materieId, string denumire)
        {
            var materieIdParameter = materieId.HasValue ?
                new ObjectParameter("materieId", materieId) :
                new ObjectParameter("materieId", typeof(int));
    
            var denumireParameter = denumire != null ?
                new ObjectParameter("denumire", denumire) :
                new ObjectParameter("denumire", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifySubject", materieIdParameter, denumireParameter);
        }
    
        public virtual int ModifyTeacher(Nullable<int> profesorId, string nume, Nullable<bool> diriginte)
        {
            var profesorIdParameter = profesorId.HasValue ?
                new ObjectParameter("profesorId", profesorId) :
                new ObjectParameter("profesorId", typeof(int));
    
            var numeParameter = nume != null ?
                new ObjectParameter("nume", nume) :
                new ObjectParameter("nume", typeof(string));
    
            var diriginteParameter = diriginte.HasValue ?
                new ObjectParameter("diriginte", diriginte) :
                new ObjectParameter("diriginte", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyTeacher", profesorIdParameter, numeParameter, diriginteParameter);
        }
    }
}
